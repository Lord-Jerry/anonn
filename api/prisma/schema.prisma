// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model users {
  id              Int       @id @unique @default(autoincrement())
  pId             String    @unique @default(uuid()) @db.Uuid
  name            String
  email           String    @unique
  username        String?    @unique
  provider        String
  providerId      String
  picture         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())

  conversations   users_conversations[]
  polls           polls[]
  votes           votes[]
}

model conversations {
  id              Int       @id @unique @default(autoincrement())
  pId             String    @unique @default(uuid()) @db.Uuid
  creatorId       Int   
  name            String?
  description     String?
  isOpen          Boolean   @default(true)
  isGroup         Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())

  users           users_conversations[]
  messages        messages[]
}

model users_conversations {
  id              Int       @id @unique @default(autoincrement())
  pId             String    @unique @default(uuid()) @db.Uuid
  conversationId  Int
  userId          Int
  // for anonymity, users initiating the converations should have randomly generated usernames
  username        String   @default("Anonymous")    
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())

  conversations   conversations @relation(fields: [conversationId], references: [id])
  users           users         @relation(fields: [userId], references: [id])
}

model messages {
  id              Int       @id @unique @default(autoincrement())
  pId             String    @unique @default(uuid()) @db.Uuid
  conversationId  Int
  senderId        Int
  content         String
  // considered creating a view to merge the users_conversations username 
  // with each message, but decided against it for now
  // why ?
  // 1. prisma doesn't aupport creating views yet.
  // 2. it would be a lot of work to maintain the view ATM
  // 3. might be an over kill for the project
  // if the need ever comes up, I'll create a view and drop this column
  // for now, sushhhhhh ðŸ¤«ðŸ¤«ðŸ¤«
  username        String  @default("Anonymous")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())

  conversations   conversations @relation(fields: [conversationId], references: [id])
}

model polls {
  id             Int       @id @unique @default(autoincrement())
  pId             String    @unique @default(uuid()) @db.Uuid
  question        String
  creatorId       Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())

  poll_options    poll_options[]
  votes           votes[]
  users           users @relation(fields: [creatorId], references: [id])
}
model poll_options {
  id             Int       @id @unique @default(autoincrement())
  pId            String    @unique @default(uuid()) @db.Uuid
  pollId         Int
  option         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())

  polls           polls @relation(fields: [pollId], references: [id])
  votes           votes[]
}

model votes {
  id             Int       @id @unique @default(autoincrement())
  pId            String    @unique @default(uuid()) @db.Uuid
  pollId         Int
  optionId       Int
  userId         Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())

  polls           polls @relation(fields: [pollId], references: [id])
  poll_options    poll_options @relation(fields: [optionId], references: [id])
  users           users @relation(fields: [userId], references: [id])
}