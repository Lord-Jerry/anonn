// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id         Int      @id @unique @default(autoincrement())
  pId        String   @unique @default(uuid()) @db.Uuid
  name       String   @db.VarChar(255)
  email      String   @unique  @db.VarChar(255)
  username   String?  @unique  @db.VarChar(100)
  provider   String   @db.VarChar(20)
  providerId String   @db.VarChar(255)
  picture    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  conversations     users_conversations[]
  polls             polls[]
  votes             votes[]
  journals          journals[]
  journal_reactions journal_reactions[]
}

model conversations {
  id          Int      @id @unique @default(autoincrement())
  pId         String   @unique @default(uuid()) @db.Uuid
  creatorId   Int
  name        String?  @db.VarChar(50)
  description String?  
  isOpen      Boolean  @default(true)
  isGroup     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  users    users_conversations[]
  messages messages[]
}

model users_conversations {
  id             Int      @id @unique @default(autoincrement())
  pId            String   @unique @default(uuid()) @db.Uuid
  conversationId Int
  userId         Int
  // for anonymity, users initiating the converations should have randomly generated usernames
  username       String   @default("Anonymous") @db.VarChar(100)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  conversations conversations @relation(fields: [conversationId], references: [id])
  users         users         @relation(fields: [userId], references: [id])
}

model messages {
  id             Int      @id @unique @default(autoincrement())
  pId            String   @unique @default(uuid()) @db.Uuid
  conversationId Int
  senderId       Int
  content        String
  // considered creating a view to merge the users_conversations username 
  // with each message, but decided against it for now
  // why ?
  // 1. prisma doesn't aupport creating views yet.
  // 2. it would be a lot of work to maintain the view ATM
  // 3. might be an over kill for the project
  // if the need ever comes up, I'll create a view and drop this column
  // for now, sushhhhhh ðŸ¤«ðŸ¤«ðŸ¤«
  username       String   @default("Anonymous") @db.VarChar(100)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  conversations conversations @relation(fields: [conversationId], references: [id])
}

model polls {
  id        Int      @id @unique @default(autoincrement())
  pId       String   @unique @default(uuid()) @db.Uuid
  question  String
  creatorId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  poll_options poll_options[]
  votes        votes[]
  users        users          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model poll_options {
  id        Int      @id @unique @default(autoincrement())
  pId       String   @unique @default(uuid()) @db.Uuid
  pollId    Int
  option    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  polls polls   @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes votes[]
}

model votes {
  id        Int      @id @unique @default(autoincrement())
  pId       String   @unique @default(uuid()) @db.Uuid
  pollId    Int
  optionId  Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  polls        polls        @relation(fields: [pollId], references: [id], onDelete: Cascade)
  poll_options poll_options @relation(fields: [optionId], references: [id])
  users        users        @relation(fields: [userId], references: [id])
}

model journals {
  id        Int      @id @unique @default(autoincrement())
  pId       String   @unique @default(uuid()) @db.Uuid
  userId    Int
  title     String   @db.VarChar(255)
  content   String
  username  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  journal_reactions journal_reactions[]
  users             users               @relation(fields: [userId], references: [id])
}

model journal_reactions {
  id        Int      @id @unique @default(autoincrement())
  pId       String   @unique @default(uuid()) @db.Uuid
  journalId Int
  userId    Int
  love      Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  journals journals @relation(fields: [journalId], references: [id])
  users    users    @relation(fields: [userId], references: [id])

  @@unique([journalId, userId])
}
